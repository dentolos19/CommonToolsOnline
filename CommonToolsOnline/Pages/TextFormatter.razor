@page "/TextFormatter"

<h1>Text Formatter</h1>

<EditForm Model="@_form" OnValidSubmit="@FormatText">
    <dataannotationsvalidator />
    <validationsummary />
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="@_form.Format">

            <option disabled></option>
            <option disabled>Common Formatting Options</option>
            <option disabled></option>

            <option value="Reverse">Reverse</option>

            <option disabled></option>
            <option disabled>Advanced Formatting Options</option>
            <option disabled></option>

            <option value="EscapeDataString">Escape Data String</option>
            <option value="UnescapeDataString">Unescape Data String</option>

            <option disabled></option>
            <option disabled>Encoding/Decoding Options</option>
            <option disabled></option>

            <option value="EncodeBase64">Encode To Base64</option>
            <option value="DecodeBase64">Decode From Base64</option>

        </InputSelect>
    </div>
    <div class="form-group">
        <InputTextArea class="form-control" @bind-Value="_form.Text" />
    </div>
    <button class="form-control" type="submit">Format Text</button>
</EditForm>

@code
{

    private TextFormatterForm _form;

    protected override void OnInitialized()
    {
        _form = new TextFormatterForm();
    }

    private void FormatText()
    {
        switch (_form.Format.ToLower())
        {

            // Common Formatting Options

            case "reverse":
                _form.Text = new string(_form.Text.Reverse().ToArray());
                break;

            // Advanced Formatting Options

            case "escapedatastring":
                _form.Text = Uri.EscapeDataString(_form.Text);
                break;

            case "unescapedatastring":
                _form.Text = Uri.UnescapeDataString(_form.Text);
                break;

            // Encoding/Decoding Options

            case "encodebase64":
                _form.Text = Utilities.EncodeToBase64(_form.Text);
                break;

            case "decodebase64":
                _form.Text = Utilities.DecodeFromBase64(_form.Text);
                break;
        }
    }

}