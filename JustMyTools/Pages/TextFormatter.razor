@page "/textformatter"

<h3>Text Formatter</h3>

<EditForm Model="@_form" OnValidSubmit="@FormatText">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        Format Type
        <InputSelect class="form-control" @bind-Value="@_form.FormatType">

            <optgroup label="Common Formatting Options"/>

            <option value="Reverse">Reverse</option>
            <option value="UrlFormat">URL Format</option>

            <optgroup label="Advanced Formatting Options"/>

            <option value="Base64">Base64</option>

        </InputSelect>
    </div>
    <div class="form-group">
        Format Direction
        <InputSelect class="form-control" @bind-Value="@_form.FormatDirection">
            <option value="BeforeToAfter">Before To After (Normal)</option>
            <option value="AfterToBefore">After To Before (Backwards)</option>
        </InputSelect>
    </div>
    <div class="form-group">
        Before
        <InputTextArea class="form-control" @bind-Value="_form.BeforeText"/>
    </div>
    <div class="form-group">
        After
        <InputTextArea class="form-control" @bind-Value="_form.AfterText"/>
    </div>
    <button class="form-control" type="submit">Format Text</button>
</EditForm>

@code {

    private TextFormatterForm _form;

    protected override void OnInitialized()
    {
        _form = new TextFormatterForm();
    }

    private void FormatText()
    {
        var type = _form.FormatType;
        var direction = _form.FormatDirection;
        if (direction == "BeforeToAfter")
        {
            switch (type)
            {
                case "Reverse":
                    _form.AfterText = new string(_form.BeforeText.Reverse().ToArray());
                    break;
                case "UrlFormat":
                    _form.AfterText = Uri.EscapeDataString(_form.BeforeText);
                    break;
                case "Base64":
                    _form.AfterText = Utilities.EncodeToBase64(_form.BeforeText);
                    break;
            }
        }
        else if (direction == "AfterToBefore")
        {
            switch (type)
            {
                case "Reverse":
                    _form.BeforeText = new string(_form.AfterText.Reverse().ToArray());
                    break;
                case "UrlFormat":
                    _form.BeforeText = Uri.UnescapeDataString(_form.AfterText);
                    break;
                case "Base64":
                    _form.BeforeText = Utilities.DecodeFromBase64(_form.AfterText);
                    break;
            }
        }
    }

}